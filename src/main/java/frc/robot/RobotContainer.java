// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

import com.pathplanner.lib.auto.AutoBuilder;
import com.pathplanner.lib.auto.NamedCommands;

import edu.wpi.first.math.MathUtil;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.DriverStation.Alliance;
import edu.wpi.first.wpilibj.smartdashboard.Field2d;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.Commands;
import edu.wpi.first.wpilibj2.command.button.CommandXboxController;
import frc.robot.Constants.OIConstants;
import frc.robot.Constants.TargetConstants;
import frc.robot.Constants.VisionConstants;
import frc.robot.commands.AttachmentCoordinator;
import frc.robot.subsystems.DriveSubsystem;
import frc.robot.subsystems.attachment.FeederSubsystem;
import frc.robot.subsystems.attachment.PivotSubsystem;
import frc.robot.subsystems.attachment.ShooterSubsystem;
import frc.robot.subsystems.attachment.UTBIntakerSubsystem;
import frc.robot.subsystems.attachment.PivotSubsystem.PivotPosition;

/*
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {
  // Autogenerated chooser with all the auto routes
  public final SendableChooser<Command> autoChooser;

  // The robot's subsystems
  public final DriveSubsystem m_robotDrive = new DriveSubsystem(this::getTargetVector);

  // Other (tests)
  double distance = 0;
  boolean autoEnableAutoPivot = false;

  public final AttachmentCoordinator m_attatchment = new AttachmentCoordinator(
      new UTBIntakerSubsystem(),
      new FeederSubsystem(),
      new ShooterSubsystem(),
      new PivotSubsystem());

  // The driver's controllers
  CommandXboxController m_driverController = new CommandXboxController(OIConstants.kDriverControllerPort);
  CommandXboxController m_attachmentController = new CommandXboxController(OIConstants.kAttatchmentsControllerPort);

  // Fields for visualization and testing
  private final Field2d m_field = new Field2d();
  private final Field2d m_estimationField = new Field2d();

  public RobotContainer() {
    registerPathplannerCommands();

    // Build an auto chooser. This will use Commands.none() as the default option.
    autoChooser = AutoBuilder.buildAutoChooser();
    SmartDashboard.putData("Auto Chooser", autoChooser);
    SmartDashboard.putData("Field", m_field);
    SmartDashboard.putData("Pose Estimation", m_estimationField);

    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
    m_robotDrive.setDefaultCommand(
        // The left stick controls translation of the robot.
        // Turning is controlled by the X axis of the right stick.
        Commands.run(
            () -> m_robotDrive.drive(
                -MathUtil.applyDeadband(m_driverController.getLeftY(), OIConstants.kDriveDeadband),
                -MathUtil.applyDeadband(m_driverController.getLeftX(), OIConstants.kDriveDeadband),
                -MathUtil.applyDeadband(m_driverController.getRightX(), OIConstants.kDriveDeadband),
                true, false),
            m_robotDrive));
  }

  /**
   * Register named commands used in pathplanner autos
   */
  private void registerPathplannerCommands() {
    NamedCommands.registerCommand("startContinuousFire", m_attatchment.getStartContinuousFireCommand());

    // TODO: maybe find a cleaner way to implement this. also includes running the
    // pivot function constantly during auto
    NamedCommands.registerCommand("startAutoAim", Commands.runOnce(() -> {
      autoEnableAutoPivot = true;
    }).asProxy());

    NamedCommands.registerCommand("zeroGyro", Commands.runOnce(() -> {
      m_robotDrive.resetGyro();
    }).asProxy());

    NamedCommands.registerCommand("pivotSubwoofer",
        m_attatchment.getSetPivotPositionCommand(PivotPosition.kSubwooferPosition));
    NamedCommands.registerCommand("pivotIntake",
        m_attatchment.getSetPivotPositionCommand(PivotPosition.kIntakePosition));

    NamedCommands.registerCommand("startFeeders", m_attatchment.getStartShootCommand());
    NamedCommands.registerCommand("startShooter", m_attatchment.getSpinShooterAutoCommand());
    NamedCommands.registerCommand("startIntakers", m_attatchment.getIntakeAutoCommand());

    NamedCommands.registerCommand("stopFeeders", m_attatchment.getStopShootCommand());
  }

  /**
   * Use this method to define your button->command mappings.
   */
  private void configureButtonBindings() {
    // Base controls

    // Set X wheels
    m_driverController.rightBumper().whileTrue(Commands.run(
        () -> m_robotDrive.setX(),
        m_robotDrive));

    // Auto aiming
    m_attachmentController.rightTrigger().whileTrue(Commands.run(() -> {
      autoAimDrive();
      autoAimPivot();
    }));

    // Reset field oriented
    m_driverController.x().onTrue(Commands.runOnce(() -> {
      m_robotDrive.resetGyro();
    }));

    // D-pad turning
    m_driverController.povUp().whileTrue(Commands.run(() -> m_robotDrive.driveWithHeading(
        -MathUtil.applyDeadband(m_driverController.getLeftY(), OIConstants.kDriveDeadband),
        -MathUtil.applyDeadband(m_driverController.getLeftX(), OIConstants.kDriveDeadband),
        Rotation2d.fromDegrees(0), true, false, 0),
        m_robotDrive));

    m_driverController.povRight().whileTrue(Commands.run(() -> m_robotDrive.driveWithHeading(
        -MathUtil.applyDeadband(m_driverController.getLeftY(), OIConstants.kDriveDeadband),
        -MathUtil.applyDeadband(m_driverController.getLeftX(), OIConstants.kDriveDeadband),
        Rotation2d.fromDegrees(-90), true, false, 0),
        m_robotDrive));

    m_driverController.povDown().whileTrue(Commands.run(() -> m_robotDrive.driveWithHeading(
        -MathUtil.applyDeadband(m_driverController.getLeftY(), OIConstants.kDriveDeadband),
        -MathUtil.applyDeadband(m_driverController.getLeftX(), OIConstants.kDriveDeadband),
        Rotation2d.fromDegrees(180), true, false, 0),
        m_robotDrive));

    m_driverController.povLeft().whileTrue(Commands.run(() -> m_robotDrive.driveWithHeading(
        -MathUtil.applyDeadband(m_driverController.getLeftY(), OIConstants.kDriveDeadband),
        -MathUtil.applyDeadband(m_driverController.getLeftX(), OIConstants.kDriveDeadband),
        Rotation2d.fromDegrees(90), true, false, 0),
        m_robotDrive));

    // Attatchment controls

    // Intake
    m_attachmentController.b().or(m_driverController.b()).whileTrue(m_attatchment.getIntakeCommand());

    // Unjam
    m_attachmentController.y().or(m_driverController.y()).whileTrue(m_attatchment.getUnjamIntakersCommand());

    // Spin up shooter
    m_attachmentController.leftBumper().whileTrue(m_attatchment.getSpinShooterCommand());

    // Shoot
    m_driverController.rightTrigger()
        .whileTrue(m_attatchment.getStartShootCommand())
        .whileFalse(m_attatchment.getStopShootCommand());

    // Arm/pivot positioning

    m_attachmentController.povUp().onTrue(m_attatchment.getSetPivotPositionCommand(PivotPosition.kSubwooferPosition));

    m_attachmentController.povDown().onTrue(m_attatchment.getSetPivotPositionCommand(PivotPosition.kIntakePosition));

    m_attachmentController.povRight()
        .onTrue(m_attatchment.getSetPivotPositionCommand(PivotPosition.kSubwooferPosition));
  }

  public void autoAimPivot() {
    // Auto aiming up-down
    double angle = (35.5428 * Math.pow(.7066, distance)) - distance * (distance > 4 ? 0.8 : 1); // adjust more for longer distance
    if (angle < 30 && angle > 0) {
      m_attatchment.setCustomPosition(angle);
    }
  }

  public void autoAimDrive() {
    // Auto aiming left-right (offset is 5 degrees for alignment)
    m_robotDrive.driveWithHeading(
        -MathUtil.applyDeadband(m_driverController.getLeftY(), OIConstants.kDriveDeadband),
        -MathUtil.applyDeadband(m_driverController.getLeftX(), OIConstants.kDriveDeadband),
        getAimingVector(getTarget()).getAngle(),
        true, false, 5);
  }

  public Translation2d getTarget() {
    return DriverStation.getAlliance().orElse(Alliance.Blue) == Alliance.Blue ? TargetConstants.kBlueSpeakerTarget
        : TargetConstants.kRedSpeakerTarget;
  }

  public Translation2d getAimingVector(Translation2d target) {
    return m_robotDrive.getPose().getTranslation().minus(target);
  }

  public Translation2d getTargetVector() {
    if (autoEnableAutoPivot == true) {
      autoAimPivot();
    }
    return getAimingVector(getTarget());
  }

  public void periodic() {
    SmartDashboard.putNumber("auto aim distance", distance);

    m_field.setRobotPose(m_robotDrive.getPose());

    var pose = VisionConstants.rearCamPoseEstimator.update();

    if (pose.isPresent()) {
      Pose2d estimatedPose = pose.get().estimatedPose.toPose2d();
      double timestamp = pose.get().timestampSeconds;

      m_estimationField.setRobotPose(estimatedPose);
      m_robotDrive.updateOdometryWithVision(estimatedPose, timestamp);

      distance = getAimingVector(getTarget()).getNorm();
    } else {
      m_estimationField.setRobotPose(new Pose2d());
    }
  }

  // This stops continuous fire and starts the beam break trigger (so it's off
  // during auto)
  public void prepareTeleop() {
    m_attatchment.getStopContinuousFireCommand().schedule();
    m_attatchment.startBeamBreakTrigger(m_driverController);
  }

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    return autoChooser.getSelected();
  }
}
